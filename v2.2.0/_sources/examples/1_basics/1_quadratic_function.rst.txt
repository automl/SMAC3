
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/1_basics/1_quadratic_function.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_1_basics_1_quadratic_function.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_1_basics_1_quadratic_function.py:


Quadratic Function
^^^^^^^^^^^^^^^^^^

An example of applying SMAC to optimize a quadratic function.

We use the black-box facade because it is designed for black-box function optimization.
The black-box facade uses a :term:`Gaussian Process<GP>` as its surrogate model.
The facade works best on a numerical hyperparameter configuration space and should not
be applied to problems with large evaluation budgets (up to 1000 evaluations).

.. GENERATED FROM PYTHON SOURCE LINES 12-85



.. image-sg:: /examples/1_basics/images/sphx_glr_1_quadratic_function_001.png
   :alt: 1 quadratic function
   :srcset: /examples/1_basics/images/sphx_glr_1_quadratic_function_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [INFO][abstract_initial_design.py:147] Using 10 initial design configurations and 0 additional configurations.
    [INFO][abstract_intensifier.py:306] Using only one seed for deterministic scenario.
    [INFO][abstract_intensifier.py:516] Added config e08add as new incumbent because there are no incumbents yet.
    [INFO][abstract_intensifier.py:595] Added config e86960 and rejected config e08add as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 78cf4a and rejected config e86960 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 9c0078 and rejected config 78cf4a as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 9aa814 and rejected config 9c0078 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config d85172 and rejected config 9aa814 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 7c6c87 and rejected config d85172 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 75d013 and rejected config 7c6c87 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 8964ef and rejected config 75d013 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config e90b89 and rejected config 8964ef as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config e486a5 and rejected config e90b89 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config a95115 and rejected config e486a5 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 9cfa74 and rejected config a95115 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 0d7153 and rejected config 9cfa74 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][smbo.py:320] Finished 50 trials.
    [INFO][abstract_intensifier.py:595] Added config f221f1 and rejected config 0d7153 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 49e111 and rejected config f221f1 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 182d99 and rejected config 49e111 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config eb7305 and rejected config 182d99 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config 9f08ad and rejected config eb7305 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config e3d7e8 and rejected config 9f08ad as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][abstract_intensifier.py:595] Added config e68abf and rejected config e3d7e8 as incumbent because it is not better than the incumbents on 1 instances:
    [INFO][smbo.py:320] Finished 100 trials.
    [INFO][smbo.py:328] Configuration budget is exhausted:
    [INFO][smbo.py:329] --- Remaining wallclock time: inf
    [INFO][smbo.py:330] --- Remaining cpu time: inf
    [INFO][smbo.py:331] --- Remaining trials: 0
    [INFO][abstract_intensifier.py:306] Using only one seed for deterministic scenario.
    Default cost: 25.0
    Incumbent cost: 1.701117581837685e-09






|

.. code-block:: Python


    import numpy as np
    from ConfigSpace import Configuration, ConfigurationSpace, Float
    from matplotlib import pyplot as plt

    from smac import HyperparameterOptimizationFacade as HPOFacade
    from smac import RunHistory, Scenario

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    class QuadraticFunction:
        @property
        def configspace(self) -> ConfigurationSpace:
            cs = ConfigurationSpace(seed=0)
            x = Float("x", (-5, 5), default=-5)
            cs.add([x])

            return cs

        def train(self, config: Configuration, seed: int = 0) -> float:
            """Returns the y value of a quadratic function with a minimum we know to be at x=0."""
            x = config["x"]
            return x**2


    def plot(runhistory: RunHistory, incumbent: Configuration) -> None:
        plt.figure()

        # Plot ground truth
        x = list(np.linspace(-5, 5, 100))
        y = [xi * xi for xi in x]
        plt.plot(x, y)

        # Plot all trials
        for k, v in runhistory.items():
            config = runhistory.get_config(k.config_id)
            x = config["x"]
            y = v.cost  # type: ignore
            plt.scatter(x, y, c="blue", alpha=0.1, zorder=9999, marker="o")

        # Plot incumbent
        plt.scatter(incumbent["x"], incumbent["x"] * incumbent["x"], c="red", zorder=10000, marker="x")

        plt.show()


    if __name__ == "__main__":
        model = QuadraticFunction()

        # Scenario object specifying the optimization "environment"
        scenario = Scenario(model.configspace, deterministic=True, n_trials=100)

        # Now we use SMAC to find the best hyperparameters
        smac = HPOFacade(
            scenario,
            model.train,  # We pass the target function here
            overwrite=True,  # Overrides any previous results that are found that are inconsistent with the meta-data
        )

        incumbent = smac.optimize()

        # Get cost of default configuration
        default_cost = smac.validate(model.configspace.get_default_configuration())
        print(f"Default cost: {default_cost}")

        # Let's calculate the cost of the incumbent
        incumbent_cost = smac.validate(incumbent)
        print(f"Incumbent cost: {incumbent_cost}")

        # Let's plot it too
        plot(smac.runhistory, incumbent)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.314 seconds)


.. _sphx_glr_download_examples_1_basics_1_quadratic_function.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/automl/SMAC3/main?urlpath=lab/tree/notebooks/examples/1_basics/1_quadratic_function.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 1_quadratic_function.ipynb <1_quadratic_function.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 1_quadratic_function.py <1_quadratic_function.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 1_quadratic_function.zip <1_quadratic_function.zip>`
