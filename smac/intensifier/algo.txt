TODO:
- Runhistory: Nur incumbent ändern, wenn auf gleichen trials auf pareto front
- Wenn mehr als 20 incumbents, dann random einen entfernen
- Queue für challenger: First in first out

The idea is the following:
- Runhistory keeps track of the incumbents and which configurations have been rejected
- Intensifier keeps track of the challengers with a queue


while True:
    incumbents <- rh.incumbents (sorted by #trials) 
    
    if queue is empty or configs in queue are all running:
        for incumbent in incumbents:
            if incumbent.#trials < max_config_calls:
                trial = get_next_random_trial(incumbent)
                if trial not None:
                    break

        new_config <- get_next_config()
        queue <- add(new_config, N=1)
        yield get_next_random_trial(new_config)  // must be a random one of the incumbent seeds
    else:
        // queue abarbeiten
        config, N <- queue.pop()

        // config might be still running 
        if trials of config still running:
            // We add the same again back to the queue
            queue <- add(config, N)
            continue

        // once a config is rejected, we don't look at it again
        if config is not rejected:
            trials <- get_next_random_trial(config, N)
            // we want to return missing N trials 
            for trial in trials:
                if trial not None:
                    yield trial
            
            // And then we add it to the queue with a higher N
            queue <- add(config, N*2)
